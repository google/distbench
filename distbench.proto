// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto2";

package distbench;

option cc_enable_arenas = true;

import "traffic_config.proto";

message TestsSetting {
  optional bool keep_instance_log = 1 [default = true];
  optional bool shutdown_after_tests = 2 [default = false];
}

message TestSequence {
  repeated DistributedSystemDescription tests = 1;
  optional TestsSetting tests_setting = 2;
}

message NodeServiceConfig {
  optional DistributedSystemDescription traffic_config = 1;
  repeated string services = 2;
}

message TraceContext {
  // This is set to the global ID of each engine along the RPC chain.
  repeated int64 engine_ids = 1 [packed = true];

  // Each engine along the chain also has an iteration count, in case
  // multiple RPCs are being sent.
  repeated int64 iterations = 2 [packed = true];
}

message RpcSample {
  optional int64 request_size = 1;
  optional int64 response_size = 2;
  optional int64 start_timestamp_ns = 3;
  optional int64 latency_ns = 4;
  optional int64 latency_weight = 5 [default = 1];
  optional TraceContext trace_context = 6;
  // If true this was a warmup RPC, and should probably be ignored
  // by most analysis tools, except when tuning the warmup period
  // of a test.
  optional bool warmup = 7;
}

message RpcPerformanceLog {
  repeated RpcSample successful_rpc_samples = 1;
  repeated RpcSample failed_rpc_samples = 2;
}

message PeerPerformanceLog {
  // The key is the rpc index
  map<int32, RpcPerformanceLog> rpc_logs = 1;
}

message RUsage {
  optional double user_cpu_time_seconds = 1;
  optional double system_cpu_time_seconds = 2;
  optional int64 max_resident_set_size = 3;
  optional int64 integral_shared_memory_size = 4;
  optional int64 integral_unshared_data_size = 5;
  optional int64 integral_unshared_stack_size = 6;
  optional int64 page_reclaims_soft_page_faults = 7;
  optional int64 page_faults_hard_page_faults = 8;
  optional int64 swaps = 9;
  optional int64 block_input_operations = 10;
  optional int64 block_output_operations = 11;
  optional int64 ipc_messages_sent = 12;
  optional int64 ipc_messages_received = 13;
  optional int64 signals_received = 14;
  optional int64 voluntary_context_switches = 15;
  optional int64 involuntary_context_switches = 16;
}

message RUsageStats {
  optional RUsage rusage_start = 1;
  optional RUsage rusage_diff = 2;
}

message ActivityMetric {
  optional string name = 1;
  optional int64  value_int = 2;
}

message ActivityLog {
  repeated ActivityMetric activity_metrics = 1;
}

// Logs for an individual instance of a service:
message ServicePerformanceLog {
  // The key is service instance's name and the value contains performance
  // logs of RPCs initiated to the named service instance.
  map<string, PeerPerformanceLog> peer_logs = 1;

  // The key is activity name and value is activity logs.
  map<string, ActivityLog> activity_logs = 2;
}

// Logs for multiple service instances:
message ServiceLogs {
  // The key is the client service instance name
  map<string, ServicePerformanceLog> instance_logs = 1;
}

message ResourceUsageLogs {
  optional RUsageStats test_sequencer_usage = 1;
  map<string, RUsageStats> node_usages = 2;
}

// Logs for all services in a test config:
message TestResult {
  optional DistributedSystemDescription traffic_config = 1;
  optional ServiceEndpointMap placement = 2;
  optional ServiceLogs service_logs = 3;
  optional ResourceUsageLogs resource_usage_logs = 5;
  repeated string log_summary = 100;
}

message GetTrafficResultResponse {
  optional ServiceLogs service_logs = 1;
  map<string, RUsageStats> node_usages = 2;
}

// Logs for all a test configs in a test sequence:
message TestSequenceResults {
  repeated TestResult test_results = 1;
}

message Attribute {
  optional string name = 1;
  optional string value = 2;
}

message NodeRegistration {
  optional string hostname = 1;
  optional string control_ip = 2;
  optional int32 control_port = 3;
  repeated Attribute attributes = 4;
  optional int32 preassigned_node_id = 5 [default = -1];
}

message NodeConfig {
  optional int32 node_id = 1;
  optional string node_alias = 2;
}

service DistBenchTestSequencer {
  // Registers a new node:
  rpc RegisterNode(NodeRegistration) returns (NodeConfig) {}

  // Runs a set of tests on the registered nodes:
  rpc RunTestSequence(TestSequence) returns (TestSequenceResults) {}
}

message ServiceEndpoint {
  optional string endpoint_address = 1;
  optional string hostname = 2;
  // ?repeated key-value for attributes?
}

message ServiceEndpointMap {
  map<string, ServiceEndpoint> service_endpoints = 1;
}

message IntroducePeersResult {}


message RunTrafficRequest {}

message RunTrafficResponse {}


message GetTrafficResultRequest {
  optional bool clear_services = 1;
}


message CancelTrafficRequest {}

message CancelTrafficResult {}


message ShutdownNodeRequest {}

message ShutdownNodeResult {}


service DistBenchNodeManager {
  // Sets up services prior to running traffic:
  rpc ConfigureNode(NodeServiceConfig) returns (ServiceEndpointMap) {}

  // Introduces NodeEngines to each other.
  rpc IntroducePeers(ServiceEndpointMap) returns (IntroducePeersResult) {}

  // Runs traffic:
  rpc RunTraffic(RunTrafficRequest) returns (RunTrafficResponse) {}

  // Get the RunTraffic performance logs:
  rpc GetTrafficResult(GetTrafficResultRequest) returns (GetTrafficResultResponse) {}

  // Cancels a currently running traffic pattern immediately:
  rpc CancelTraffic(CancelTrafficRequest) returns (CancelTrafficResult) {}

  // Shuts down a node manager after any active test completes:
  rpc ShutdownNode(ShutdownNodeRequest) returns (ShutdownNodeResult) {}
}

message ConnectRequest {
  optional bytes initiator_info = 1;
}

message ConnectResponse {
  optional bytes responder_info = 1;
}

service ConnectionSetup {
  // Get a connection setup
  rpc SetupConnection(ConnectRequest) returns (ConnectResponse) {}
}

message GenericRequest {
  optional bytes payload = 1;
  optional int32 rpc_index = 2;
  optional TraceContext trace_context = 3;
  optional bool warmup = 4;

  optional int64 response_payload_size = 5;
}

message GenericResponse {
  optional bytes payload = 1;
  optional string error_message = 2;
}

message ServerAddress {
  optional string ip_address = 1;
  optional int32 port = 2;
  optional string socket_address = 3;
}

service Traffic {
  // One RPC to simulate them all:
  rpc GenericRpc(GenericRequest) returns (GenericResponse) {}
}
